/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.3/userguide/tutorial_java_projects.html
 */


// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'eclipse'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile ('org.slf4j:slf4j-api:1.7.21')
    compile("net.jmatrix:slf-color-console:1.0.7")
    compile('net.jmatrix:jmutils:1.0.6') // For PerfTrack
    
    compile("com.fasterxml.jackson.core:jackson-core:2.8.5")
    compile("com.fasterxml.jackson.core:jackson-annotations:2.8.5")
    compile("com.fasterxml.jackson.core:jackson-databind:2.8.5")
    
    compile('javax.xml.bind:jaxb-api:2.3.1')
    compile("com.sun.xml.bind:jaxb-core:2.3.0")
    compile("com.sun.xml.bind:jaxb-impl:2.3.1")

    //compile("com.google.guava:guava:21.0")
}

build.dependsOn "copyJarsToBuild"
build.dependsOn "copyCliToBuild"
build.dependsOn "copyContribToBuild"
build.dependsOn "copyConfigToBuild"

task copyJarsToBuild (type: Copy) {
   into "$buildDir/lib"
   from configurations.runtime
}

task copyCliToBuild (type: Copy) {
   into "$buildDir/cli"
   from "cli"
}

task copyContribToBuild (type: Copy) {
   into "$buildDir/contrib"
   from "contrib"
}

task copyConfigToBuild (type: Copy) {
   into "$buildDir/config"
   from "config"
}

task tar(type: Tar) {
    into ('guide') { 
        from "build"
        include ("cli/**", "classes/**", "resources/**", "lib/**", "libs/**", "config/**")
    }
    baseName = 'guide'
    destinationDir = file('build')
    extension = 'tar.gz'
    compression = Compression.GZIP
}


jar {
    manifest {
        attributes 'Main-Class': 'xmltv.GuideServer'
    }
    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
        configurations.runtime.collect { it.isDirectory() ? it : zipTree(it) }
    }
}
